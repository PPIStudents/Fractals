<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_util_8h" xml:lang="en-US">
<title>util.h File Reference</title>
<indexterm><primary>util.h</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structfigure__t">figure_t</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structboom__row">boom_row</link></para>
</listitem>
            <listitem><para>class <link linkend="_classpod__array">pod_array&lt; T &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_classpod__block">pod_block&lt; T, _max_ &gt;</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_util_8h_1a54a4d3dbd45901e627504e1a4cdbf686">OBJ_SIZE</link>&#160;&#160;&#160;4</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_util_8h_1a644a5a372f9b18ed4463aff44e371f0c">swap_value</link> (T &amp;a, T &amp;b)</para>
</listitem>
            <listitem><para>void <link linkend="_util_8h_1a7f301b7d82e7e878a6d3b4fdc89e409b">figure_size</link> (const <link linkend="_structfigure__t">figure_t</link> &amp;figure, LPRECT prc, int size)</para>
</listitem>
            <listitem><para>bool <link linkend="_util_8h_1a96bc79472b0ef10a69525637b77652fd">field_remove</link> (int field[][FIELD_COLS], bool line_erase=false, <link linkend="_classpod__block">pod_block</link>&lt; <link linkend="_structboom__row">boom_row</link>, FIELD_ROWS &gt; *booms=NULL)</para>
</listitem>
            <listitem><para>int <link linkend="_util_8h_1afaf3cf544b4fe82e031ce536fbd42f78">field_find_line</link> (int field[][FIELD_COLS], int &amp;last)</para>
</listitem>
            <listitem><para>void <link linkend="_util_8h_1ae34222375b8a6a2a7d1a129489e2c5ac">figure_put_field</link> (int x, int y, const <link linkend="_structfigure__t">figure_t</link> &amp;figure, int field[][FIELD_COLS])</para>
</listitem>
            <listitem><para>bool <link linkend="_util_8h_1a4010b92a93fc6239f1cc6cf213f5c425">is_move_horz</link> (int x, int y, const <link linkend="_structfigure__t">figure_t</link> &amp;fg, int field[][FIELD_COLS], int velocity, bool left)</para>
</listitem>
            <listitem><para>BOOL <link linkend="_util_8h_1ae2af2e4dfced0dbcaf04978c90b2fc1c">is_move_down</link> (int x, int y, const <link linkend="_structfigure__t">figure_t</link> &amp;figure, int step, int field[][FIELD_COLS])</para>
</listitem>
            <listitem><para>bool <link linkend="_util_8h_1a8bb3704a2eaa84bc97dc1f497eb15217">figure_rotate</link> (int x, int y, <link linkend="_structfigure__t">figure_t</link> &amp;figure, int field[][FIELD_COLS])</para>
</listitem>
            <listitem><para>void <link linkend="_util_8h_1a6f0b48cd728baaf5dbf7a80535a96225">figure_set</link> (<link linkend="_structfigure__t">figure_t</link> &amp;src, int val)</para>
</listitem>
            <listitem><para>void <link linkend="_util_8h_1a8647f99c56b7396f2c858a366936c5bc">figure_reverse_horz</link> (<link linkend="_structfigure__t">figure_t</link> &amp;src)</para>
</listitem>
            <listitem><para>void <link linkend="_util_8h_1aa01b520028a67fd9b09d9ba7b1a3308d">figure_reverse_vert</link> (<link linkend="_structfigure__t">figure_t</link> &amp;src)</para>
</listitem>
            <listitem><para>void <link linkend="_util_8h_1a2845e09fef63a9ff3609366417723ffd">figure_transponse</link> (<link linkend="_structfigure__t">figure_t</link> &amp;dst, const <link linkend="_structfigure__t">figure_t</link> &amp;src)</para>
</listitem>
            <listitem><para>void <link linkend="_util_8h_1a3b58754044721a7b3e5db1019120127e">figure_transponse</link> (<link linkend="_structfigure__t">figure_t</link> &amp;src)</para>
</listitem>
            <listitem><para>bool <link linkend="_util_8h_1a1f255e45d77b9a134c9d4e83168dbae0">figures_load</link> (<link linkend="_classpod__array">pod_array</link>&lt; <link linkend="_structfigure__t">figure_t</link> &gt; &amp;fgs, HINSTANCE hinst, LPCWSTR filename, LPCWSTR type=NULL)</para>
</listitem>
            <listitem><para>void * <link linkend="_util_8h_1a160dcabc54bbecfc69484678cafadb81">operator new</link> (size_t size)</para>
</listitem>
            <listitem><para>void <link linkend="_util_8h_1a86107594327f3a001230df9802cd4422">operator delete</link> (void *p)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_util_8h_1a54a4d3dbd45901e627504e1a4cdbf686"/><section>
    <title>OBJ_SIZE</title>
<indexterm><primary>OBJ_SIZE</primary><secondary>util.h</secondary></indexterm>
<indexterm><primary>util.h</primary><secondary>OBJ_SIZE</secondary></indexterm>
<para><computeroutput>#define OBJ_SIZE&#160;&#160;&#160;4</computeroutput></para></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_util_8h_1afaf3cf544b4fe82e031ce536fbd42f78"/><section>
    <title>field_find_line()</title>
<indexterm><primary>field_find_line</primary><secondary>util.h</secondary></indexterm>
<indexterm><primary>util.h</primary><secondary>field_find_line</secondary></indexterm>
<para><computeroutput>int field_find_line (int field[][FIELD_COLS], int &amp; last)</computeroutput></para></section>
<anchor xml:id="_util_8h_1a96bc79472b0ef10a69525637b77652fd"/><section>
    <title>field_remove()</title>
<indexterm><primary>field_remove</primary><secondary>util.h</secondary></indexterm>
<indexterm><primary>util.h</primary><secondary>field_remove</secondary></indexterm>
<para><computeroutput>bool field_remove (int field[][FIELD_COLS], bool line_erase = <computeroutput>false</computeroutput>
, <link linkend="_classpod__block">pod_block</link>&lt; <link linkend="_structboom__row">boom_row</link>, FIELD_ROWS &gt; * booms = <computeroutput>NULL</computeroutput>
)</computeroutput></para></section>
<anchor xml:id="_util_8h_1ae34222375b8a6a2a7d1a129489e2c5ac"/><section>
    <title>figure_put_field()</title>
<indexterm><primary>figure_put_field</primary><secondary>util.h</secondary></indexterm>
<indexterm><primary>util.h</primary><secondary>figure_put_field</secondary></indexterm>
<para><computeroutput>void figure_put_field (int x, int y, const <link linkend="_structfigure__t">figure_t</link> &amp; figure, int field[][FIELD_COLS])</computeroutput></para></section>
<anchor xml:id="_util_8h_1a8647f99c56b7396f2c858a366936c5bc"/><section>
    <title>figure_reverse_horz()</title>
<indexterm><primary>figure_reverse_horz</primary><secondary>util.h</secondary></indexterm>
<indexterm><primary>util.h</primary><secondary>figure_reverse_horz</secondary></indexterm>
<para><computeroutput>void figure_reverse_horz (<link linkend="_structfigure__t">figure_t</link> &amp; src)</computeroutput></para></section>
<anchor xml:id="_util_8h_1aa01b520028a67fd9b09d9ba7b1a3308d"/><section>
    <title>figure_reverse_vert()</title>
<indexterm><primary>figure_reverse_vert</primary><secondary>util.h</secondary></indexterm>
<indexterm><primary>util.h</primary><secondary>figure_reverse_vert</secondary></indexterm>
<para><computeroutput>void figure_reverse_vert (<link linkend="_structfigure__t">figure_t</link> &amp; src)</computeroutput></para></section>
<anchor xml:id="_util_8h_1a8bb3704a2eaa84bc97dc1f497eb15217"/><section>
    <title>figure_rotate()</title>
<indexterm><primary>figure_rotate</primary><secondary>util.h</secondary></indexterm>
<indexterm><primary>util.h</primary><secondary>figure_rotate</secondary></indexterm>
<para><computeroutput>bool figure_rotate (int x, int y, <link linkend="_structfigure__t">figure_t</link> &amp; figure, int field[][FIELD_COLS])</computeroutput></para></section>
<anchor xml:id="_util_8h_1a6f0b48cd728baaf5dbf7a80535a96225"/><section>
    <title>figure_set()</title>
<indexterm><primary>figure_set</primary><secondary>util.h</secondary></indexterm>
<indexterm><primary>util.h</primary><secondary>figure_set</secondary></indexterm>
<para><computeroutput>void figure_set (<link linkend="_structfigure__t">figure_t</link> &amp; src, int val)</computeroutput></para></section>
<anchor xml:id="_util_8h_1a7f301b7d82e7e878a6d3b4fdc89e409b"/><section>
    <title>figure_size()</title>
<indexterm><primary>figure_size</primary><secondary>util.h</secondary></indexterm>
<indexterm><primary>util.h</primary><secondary>figure_size</secondary></indexterm>
<para><computeroutput>void figure_size (const <link linkend="_structfigure__t">figure_t</link> &amp; figure, LPRECT prc, int size)</computeroutput></para></section>
<anchor xml:id="_util_8h_1a2845e09fef63a9ff3609366417723ffd"/><section>
    <title>figure_transponse()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>figure_transponse</primary><secondary>util.h</secondary></indexterm>
<indexterm><primary>util.h</primary><secondary>figure_transponse</secondary></indexterm>
<para><computeroutput>void figure_transponse (<link linkend="_structfigure__t">figure_t</link> &amp; dst, const <link linkend="_structfigure__t">figure_t</link> &amp; src)</computeroutput></para></section>
<anchor xml:id="_util_8h_1a3b58754044721a7b3e5db1019120127e"/><section>
    <title>figure_transponse()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>figure_transponse</primary><secondary>util.h</secondary></indexterm>
<indexterm><primary>util.h</primary><secondary>figure_transponse</secondary></indexterm>
<para><computeroutput>void figure_transponse (<link linkend="_structfigure__t">figure_t</link> &amp; src)</computeroutput></para></section>
<anchor xml:id="_util_8h_1a1f255e45d77b9a134c9d4e83168dbae0"/><section>
    <title>figures_load()</title>
<indexterm><primary>figures_load</primary><secondary>util.h</secondary></indexterm>
<indexterm><primary>util.h</primary><secondary>figures_load</secondary></indexterm>
<para><computeroutput>bool figures_load (<link linkend="_classpod__array">pod_array</link>&lt; <link linkend="_structfigure__t">figure_t</link> &gt; &amp; fgs, HINSTANCE hinst, LPCWSTR filename, LPCWSTR type = <computeroutput>NULL</computeroutput>
)</computeroutput></para></section>
<anchor xml:id="_util_8h_1ae2af2e4dfced0dbcaf04978c90b2fc1c"/><section>
    <title>is_move_down()</title>
<indexterm><primary>is_move_down</primary><secondary>util.h</secondary></indexterm>
<indexterm><primary>util.h</primary><secondary>is_move_down</secondary></indexterm>
<para><computeroutput>BOOL is_move_down (int x, int y, const <link linkend="_structfigure__t">figure_t</link> &amp; figure, int step, int field[][FIELD_COLS])</computeroutput></para></section>
<anchor xml:id="_util_8h_1a4010b92a93fc6239f1cc6cf213f5c425"/><section>
    <title>is_move_horz()</title>
<indexterm><primary>is_move_horz</primary><secondary>util.h</secondary></indexterm>
<indexterm><primary>util.h</primary><secondary>is_move_horz</secondary></indexterm>
<para><computeroutput>bool is_move_horz (int x, int y, const <link linkend="_structfigure__t">figure_t</link> &amp; fg, int field[][FIELD_COLS], int velocity, bool left)</computeroutput></para></section>
<anchor xml:id="_util_8h_1a86107594327f3a001230df9802cd4422"/><section>
    <title>operator delete()</title>
<indexterm><primary>operator delete</primary><secondary>util.h</secondary></indexterm>
<indexterm><primary>util.h</primary><secondary>operator delete</secondary></indexterm>
<para><computeroutput>void operator delete (void * p)</computeroutput></para></section>
<anchor xml:id="_util_8h_1a160dcabc54bbecfc69484678cafadb81"/><section>
    <title>operator new()</title>
<indexterm><primary>operator new</primary><secondary>util.h</secondary></indexterm>
<indexterm><primary>util.h</primary><secondary>operator new</secondary></indexterm>
<para><computeroutput>void * operator new (size_t size)</computeroutput></para></section>
<anchor xml:id="_util_8h_1a644a5a372f9b18ed4463aff44e371f0c"/><section>
    <title>swap_value()</title>
<indexterm><primary>swap_value</primary><secondary>util.h</secondary></indexterm>
<indexterm><primary>util.h</primary><secondary>swap_value</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void swap_value (T &amp; a, T &amp; b)</computeroutput></para></section>
</section>
</section>
